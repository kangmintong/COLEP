import torch
import numpy as np
from scipy.stats.mstats import mquantiles

from scipy.stats import norm

ori = np.array([0.5136, 0.4701, 0.4599, 0.4796, 0.4033, 0.4834, 0.4731, 0.6371, 0.3958,
        0.4857, 0.4018, 0.4784, 0.4990, 0.9605, 0.3850, 0.9005, 0.5543, 0.4435,
        0.9440, 0.4547, 0.4778, 0.4746, 0.6843, 0.4368, 0.5011, 0.4528, 0.4803,
        0.4711, 0.4490, 0.4724, 0.5209, 0.4129, 0.4462, 0.3631, 0.4745, 0.3781,
        0.5570, 0.4786, 0.4804, 0.4850, 0.9398, 0.7587, 0.4945, 0.4366, 0.4409,
        0.5572, 0.8463, 0.4954, 0.4846, 0.8740, 0.4770, 0.4878, 0.9074, 0.5627,
        0.5179, 0.5007, 0.4977, 0.9347, 0.8948, 0.4527, 0.7261, 0.4751, 0.9917,
        0.4108, 0.6809, 0.6070, 0.7890, 0.4578, 0.6398, 0.4791, 0.5003, 0.5604,
        0.6653, 0.4880, 0.8831, 0.5313, 0.4668, 0.5003, 0.9491, 0.4869, 0.4072,
        0.5012, 0.3589, 0.5006, 0.4924, 0.4798, 0.4938, 0.4061, 0.7999, 0.5417,
        0.5212, 0.4598, 0.4996, 0.5807, 0.4573, 0.4845, 0.4874, 0.4577, 0.4888,
        0.5264])
alpha = 0.9
max_norm = 0.25
sigma_certify = 0.5

ori = np.sort(ori)
p = norm.cdf( norm.ppf(ori[int(len(ori)*alpha)]) - max_norm / sigma_certify)
total = len(ori)
covered = 0.
for x in ori:
    if x < p:
        covered += 1
worst_case_coverage = covered / total
print(f'worst case coverage: {worst_case_coverage}')